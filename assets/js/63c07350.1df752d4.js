"use strict";(self.webpackChunkcartesi_boardgame=self.webpackChunkcartesi_boardgame||[]).push([[5726],{3820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(4848),a=n(8453);const o={sidebar_position:6},r="Storage",s={id:"core-concepts/architecture/storage",title:"Storage",description:"SQLite Integration with T&D\u2019s Boardgame Framework",source:"@site/docs/core-concepts/architecture/storage.md",sourceDirName:"core-concepts/architecture",slug:"/core-concepts/architecture/storage",permalink:"/documentation-boardgame/docs/core-concepts/architecture/storage",draft:!1,unlisted:!1,editUrl:"https://github.com/mmvazzano/documentation-boardgame/edit/main/docs/core-concepts/architecture/storage.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Lobby",permalink:"/documentation-boardgame/docs/core-concepts/architecture/lobby"},next:{title:"Cartesi Integration",permalink:"/documentation-boardgame/docs/core-concepts/cartesi-integration"}},l={},c=[{value:"SQLite Integration with T&amp;D\u2019s Boardgame Framework",id:"sqlite-integration-with-tds-boardgame-framework",level:2},{value:"Advantages of Using SQLite",id:"advantages-of-using-sqlite",level:3},{value:"How to Implement SQLite3",id:"how-to-implement-sqlite3",level:3},{value:"Running with NONODO (the local Cartesi node for development and testing):",id:"running-with-nonodo-the-local-cartesi-node-for-development-and-testing",level:4},{value:"Running with CVM:",id:"running-with-cvm",level:4},{value:"Incorporating SQLite into the Code:",id:"incorporating-sqlite-into-the-code",level:4},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const t={h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"storage",children:"Storage"})}),"\n",(0,i.jsx)(t.h2,{id:"sqlite-integration-with-tds-boardgame-framework",children:"SQLite Integration with T&D\u2019s Boardgame Framework"}),"\n",(0,i.jsx)(t.p,{children:"With this new functionality, we've added the option to use SQLite as a storage method for the framework, expanding the possibilities and catering to various storage needs.\nIntegrating SQLite3 as a storage method within T&D\u2019s Boardgame Framework offers numerous advantages."}),"\n",(0,i.jsx)(t.h3,{id:"advantages-of-using-sqlite",children:"Advantages of Using SQLite"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Data Persistence: SQLite allows for persistent storage of data."}),"\n",(0,i.jsx)(t.li,{children:"Ease of Use: SQLite is a lightweight database that does not require a separate server, simplifying its implementation and use in local environments."}),"\n",(0,i.jsx)(t.li,{children:"Portability: SQLite database files are highly portable, facilitating data transfer and backup for the game."}),"\n",(0,i.jsx)(t.li,{children:"Advanced Queries: SQLite supports complex query operations, enabling efficient handling and manipulation of large volumes of data."}),"\n",(0,i.jsx)(t.li,{children:"Compatibility and Flexibility: Adding SQLite as a storage option enhances the framework\u2019s flexibility, allowing developers to choose between different persistence methods based on their specific needs."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"how-to-implement-sqlite3",children:"How to Implement SQLite3"}),"\n",(0,i.jsx)(t.h4,{id:"running-with-nonodo-the-local-cartesi-node-for-development-and-testing",children:"Running with NONODO (the local Cartesi node for development and testing):"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["In Your Backend:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"SQLite3 must be installed locally on your system, as NONODO will interact directly with this installation. Ensure that SQLite3 is available and properly configured; if not, you can run the command npm install sqlite3 on your system."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"running-with-cvm",children:"Running with CVM:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"In Your Backend:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If you prefer to run the framework with CVM, simply use the preconfigured Dockerfile that includes SQLite3."}),"\n",(0,i.jsx)(t.li,{children:"To run CVM, execute the command cartesi build and then cartesi run, ensuring that all necessary components are integrated."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Configuration Verification:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Verify that the Dockerfile is correctly configured to integrate SQLite3 and that your application can access the database without issues."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"incorporating-sqlite-into-the-code",children:"Incorporating SQLite into the Code:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"In Your Backend:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The database to be used must be sent to the server (if no database is sent, the default database is the in-memory)."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Boardgame Example",src:n(8977).A+"",width:"1118",height:"529"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"This feature enhances the flexibility of game data storage by introducing SQLite as an additional storage option, complementing the existing methods like in-memory and flat file storage."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8977:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/storage-4742d65f6c3e3de1505649c0089f01a4.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var i=n(6540);const a={},o=i.createContext(a);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);